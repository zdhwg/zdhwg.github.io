<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WG的博客</title>
    <link>https://zdhwg.github.io/</link>
    <description>Recent content on WG的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 06 Apr 2020 14:28:06 +0800</lastBuildDate>
    
	<atom:link href="https://zdhwg.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Django及Keras中的LSTM</title>
      <link>https://zdhwg.github.io/post/keras%E4%B8%AD%E7%9A%84LSTM%E5%8F%8ADjango/</link>
      <pubDate>Mon, 06 Apr 2020 14:28:06 +0800</pubDate>
      
      <guid>https://zdhwg.github.io/post/keras%E4%B8%AD%E7%9A%84LSTM%E5%8F%8ADjango/</guid>
      <description>Django及keras中的LSTM 1.keras中的LSTM 最近在做光伏功率预测的项目时需要用到keras中的LSTM函数，本文对LSTM中的参数做个记录。 keras.layers.LSTM 类中有两个常用但不容易理解的参数，分别是 return_sequences 和 return_state。对于两个参数，官方定义如下： return_sequences: 布尔值。是返回输出序</description>
    </item>
    
    <item>
      <title>微博新冠肺炎的舆论分析</title>
      <link>https://zdhwg.github.io/post/%E5%BE%AE%E5%8D%9A%E6%96%B0%E5%86%A0%E8%82%BA%E7%82%8E%E7%9A%84%E8%88%86%E8%AE%BA%E5%88%86%E6%9E%90/</link>
      <pubDate>Thu, 02 Apr 2020 20:56:15 +0800</pubDate>
      
      <guid>https://zdhwg.github.io/post/%E5%BE%AE%E5%8D%9A%E6%96%B0%E5%86%A0%E8%82%BA%E7%82%8E%E7%9A%84%E8%88%86%E8%AE%BA%E5%88%86%E6%9E%90/</guid>
      <description>微博新冠肺炎的舆论分析 1.微博数据的抓取 在抓取微博数据时，有几种选择方式，一是按照热度排名抓取微博，这种选择方式会造成抓取的微博数量过于少，1月份的微博数量只有几页；另一种选择方式是按照原创抓取，可能会更能反应民众的真实情绪，这个后续再加以讨论。 目前常用的分词方法主要有三种： (1</description>
    </item>
    
    <item>
      <title>微博爬虫</title>
      <link>https://zdhwg.github.io/post/python%E7%88%AC%E8%99%AB-%E5%BE%AE%E5%8D%9A%E7%88%AC%E8%99%AB/</link>
      <pubDate>Wed, 01 Apr 2020 21:14:13 +0800</pubDate>
      
      <guid>https://zdhwg.github.io/post/python%E7%88%AC%E8%99%AB-%E5%BE%AE%E5%8D%9A%E7%88%AC%E8%99%AB/</guid>
      <description>构建微博爬虫系统 本文的主要目的为记录微博爬虫的学习过程，最终的目的为实现爬取微博上的信息，可以完成定向信息的检索，将一定时间内的微博爬取下来。 1.微博数据不同于qq空间和朋友圈，是唯一一个可以爬的社交媒体平台。微博数据中可以爬取到数据维度有： 字段 说明 weibo_url 这条微博的URL，可以作为这</description>
    </item>
    
    <item>
      <title>Python批量执行多个py文件</title>
      <link>https://zdhwg.github.io/post/python%E6%89%B9%E9%87%8F%E6%89%A7%E8%A1%8C%E5%A4%9A%E4%B8%AApy%E6%96%87%E4%BB%B6/</link>
      <pubDate>Sun, 29 Mar 2020 11:01:43 +0800</pubDate>
      
      <guid>https://zdhwg.github.io/post/python%E6%89%B9%E9%87%8F%E6%89%A7%E8%A1%8C%E5%A4%9A%E4%B8%AApy%E6%96%87%E4%BB%B6/</guid>
      <description>python实现批量顺序执行同目录下的py文件 今天在看知乎时看到的一个技巧，在用jupyter notebook调参时，为了避免凌晨坐在电脑前面看着电脑运行，可以写个按顺序执行多个python文件的脚本。 假如我要执行code目录下的python程序，假设该目录下有1.py,2.py</description>
    </item>
    
    <item>
      <title>情感分析</title>
      <link>https://zdhwg.github.io/post/%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/</link>
      <pubDate>Thu, 26 Mar 2020 15:17:24 +0800</pubDate>
      
      <guid>https://zdhwg.github.io/post/%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/</guid>
      <description>情感分析 1.情感分析实验总体思路是对已有的外卖评价，利用三种来源的词向量（词向量的来源有Word2vec、Glove和BERT等），将文本映射到向量空间后，利用聚类（HCM，KNN，层次聚类法）聚类，其中聚类方式中可以选择的距离公式大致分为三种：欧式距离、余弦距离和MWD距离。利</description>
    </item>
    
    <item>
      <title>Python爬虫 爬取视频</title>
      <link>https://zdhwg.github.io/post/python%E7%88%AC%E8%99%AB-%E7%88%AC%E5%8F%96%E8%A7%86%E9%A2%91/</link>
      <pubDate>Fri, 20 Mar 2020 11:15:27 +0800</pubDate>
      
      <guid>https://zdhwg.github.io/post/python%E7%88%AC%E8%99%AB-%E7%88%AC%E5%8F%96%E8%A7%86%E9%A2%91/</guid>
      <description>Python爬虫 爬取视频 现在很多视频网站采用流媒体技术进行播放视频，一种常见的方案是m3u8文件+ts文件 。 m3u8是苹果公司推出一种视频播放标准，是m3u的一种，不过编码方式是utf-8，是一种文件检索格式，将视频切割成一小段一小段的ts格式的视频文件，然后存在服务器中（现在为</description>
    </item>
    
    <item>
      <title>cs224n笔记 Lecture10</title>
      <link>https://zdhwg.github.io/post/cs224n%E7%AC%94%E8%AE%B0-lecture10/</link>
      <pubDate>Thu, 19 Mar 2020 20:35:51 +0800</pubDate>
      
      <guid>https://zdhwg.github.io/post/cs224n%E7%AC%94%E8%AE%B0-lecture10/</guid>
      <description>cs224n笔记 Lecture10 -(Textual) Question Answerin 问答系统(Question Answering)实际需求很多，比如我们常用的谷歌搜索就可看做是问答系统。通常我们可以将问答系统看做两部分：从海量的文件中，找到与问题相关的可能包含回答的文件，这一过程是传统的information retrieval；从文件或段</description>
    </item>
    
    <item>
      <title>Python爬虫 爬取图片</title>
      <link>https://zdhwg.github.io/post/python%E7%88%AC%E8%99%AB-%E7%88%AC%E5%8F%96%E5%9B%BE%E7%89%87/</link>
      <pubDate>Thu, 19 Mar 2020 09:46:53 +0800</pubDate>
      
      <guid>https://zdhwg.github.io/post/python%E7%88%AC%E8%99%AB-%E7%88%AC%E5%8F%96%E5%9B%BE%E7%89%87/</guid>
      <description>python爬虫-爬取图片 上次爬取文本的网站是静态网站，今天尝试爬取动态网站上的图片。静态网站和动态网站的区别是什么呢？首先静态网站的特点如下： 静态网站是最初的建站方式，浏览者所看到的每个页面是建站者上传到服务器上的一个 html （ htm ）文件，这种网站每增加、删除、修改一个页面，都必须重新</description>
    </item>
    
    <item>
      <title>Python爬虫-爬取文本</title>
      <link>https://zdhwg.github.io/post/python%E7%88%AC%E8%99%AB-%E7%88%AC%E5%8F%96%E6%96%87%E6%9C%AC/</link>
      <pubDate>Tue, 17 Mar 2020 22:08:24 +0800</pubDate>
      
      <guid>https://zdhwg.github.io/post/python%E7%88%AC%E8%99%AB-%E7%88%AC%E5%8F%96%E6%96%87%E6%9C%AC/</guid>
      <description>python 爬虫-爬取文本 以前做项目时需要爬虫，总是现学现用，现在抽个时间把爬虫的知识点整理一下，以便以后查看。 网络爬虫（web spider)根据网页地址（URL）爬取网页内容，在用爬虫之前，一般需要到指定的URL处审查元素（鼠标右键），查看目标网页的HTML格式分布，HTML是浏览器搭建</description>
    </item>
    
    <item>
      <title>Cs224n笔记 Lecture8</title>
      <link>https://zdhwg.github.io/post/cs224n%E7%AC%94%E8%AE%B0-lecture8/</link>
      <pubDate>Sun, 15 Mar 2020 10:43:29 +0800</pubDate>
      
      <guid>https://zdhwg.github.io/post/cs224n%E7%AC%94%E8%AE%B0-lecture8/</guid>
      <description>lecture8笔记-Machine Translation,Sequence-to-sequence and attention 1.machine tranlation:从一个语言翻译到另一个语言，起源于冷战时期，最初是将俄语翻译成英语。最初是基于规则的，按照词典的对照转换；后来逐渐发展出按统计规则的SMT，但SMT太复杂了，最终神经机器翻译NMT横空出世，机器翻译迎来了新的发展。</description>
    </item>
    
    <item>
      <title>Cs224n笔记 Lecture7</title>
      <link>https://zdhwg.github.io/post/cs224n%E7%AC%94%E8%AE%B0-lecture7/</link>
      <pubDate>Sat, 14 Mar 2020 10:28:07 +0800</pubDate>
      
      <guid>https://zdhwg.github.io/post/cs224n%E7%AC%94%E8%AE%B0-lecture7/</guid>
      <description>lecture7笔记-vanishing gradients and fancy Rnns 1.梯度消失：由于链式法则（chain rule),在对深层网络反向传播梯度时，可能会出现梯度越乘越小的情况，此即为梯度消失。RNN中的梯度消失和一般的深层神经网络的梯度消失概念有所不同，原因在于RNN权重共享，总梯度为各个时间步的梯</description>
    </item>
    
    <item>
      <title>Cs224n笔记-lecture6</title>
      <link>https://zdhwg.github.io/post/cs224n%E7%AC%94%E8%AE%B0-lecture6/</link>
      <pubDate>Wed, 11 Mar 2020 18:54:32 +0800</pubDate>
      
      <guid>https://zdhwg.github.io/post/cs224n%E7%AC%94%E8%AE%B0-lecture6/</guid>
      <description>lecture6 Language Models and Recurrent Nerual Networks 1.language model:就是根据已知序列推测下一个单词（或序列）的问题。输入法、浏览器搜索都有语言模型（根据你输入的单词推测下一个单词或短语）。 2.n-grams:最经典的language model是n-gram,它是基于多个单词在一起使用的统计特性，推测下一个单词时运用了条</description>
    </item>
    
    <item>
      <title>Cs224n笔记 Lecture5</title>
      <link>https://zdhwg.github.io/post/cs224n%E7%AC%94%E8%AE%B0-lecture5/</link>
      <pubDate>Tue, 10 Mar 2020 21:42:13 +0800</pubDate>
      
      <guid>https://zdhwg.github.io/post/cs224n%E7%AC%94%E8%AE%B0-lecture5/</guid>
      <description>lecture5-Dependency Parsing(笔记) 1.为了正确解释理解语言，首先需要理解句子的结构。例如下面的例子： San Jose cops kill man with knife 这句话可能会有歧义，一种理解是：警察用刀杀了那个男子。 这种翻译的理解是： cops 是 kill 的 subject (subject 指 主语) man 是 kill的 object (object 指 宾语) knife 是 kill 的 modifier (modifier 指 修饰符) 另一种理解是：警察杀了那个有刀的男子</description>
    </item>
    
    <item>
      <title>Cs224n笔记 Lecture4</title>
      <link>https://zdhwg.github.io/post/cs224n%E7%AC%94%E8%AE%B0-lecture4/</link>
      <pubDate>Wed, 04 Mar 2020 16:49:29 +0800</pubDate>
      
      <guid>https://zdhwg.github.io/post/cs224n%E7%AC%94%E8%AE%B0-lecture4/</guid>
      <description>lecture4:Backpropagation and computation graphs(笔记) 1.问题：在使用预训练词向量时，比如进行情感分类，在&amp;quot;fine tune&amp;quot;时训练集的词向量会move around，而测试 集的词向量未发生变化，由此在测试集上测试时可能会出现偏差。 答：首先不能抛弃预训练的词向量，在面对规模较小的数据集时，</description>
    </item>
    
    <item>
      <title>理解Glove模型</title>
      <link>https://zdhwg.github.io/post/%E7%90%86%E8%A7%A3Glove%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 17 Feb 2020 19:49:09 +0800</pubDate>
      
      <guid>https://zdhwg.github.io/post/%E7%90%86%E8%A7%A3Glove%E6%A8%A1%E5%9E%8B/</guid>
      <description>Glove是词的向量化表示方法之一，常用的词的向量化表示方法有：word2vec、glove、ELMo、BERT。首先先介绍一下除Glove以外的其他三种方法。 word2vec word2vec是2013年提出的方法， 它的核心思想是通过词的上下文得到词的向量化表示，有两种方法：CBOW（通过附近</description>
    </item>
    
    <item>
      <title>Keras中embedding层的作用</title>
      <link>https://zdhwg.github.io/post/keras%E4%B8%ADembedding%E5%B1%82%E7%9A%84%E4%BD%9C%E7%94%A8/</link>
      <pubDate>Sat, 15 Feb 2020 15:23:32 +0800</pubDate>
      
      <guid>https://zdhwg.github.io/post/keras%E4%B8%ADembedding%E5%B1%82%E7%9A%84%E4%BD%9C%E7%94%A8/</guid>
      <description>一、深度学习中embedding层的作用是什么？在做NLP相关工作时经常会与embedding层打交道，在 查阅了有关资料后，将其作用和用法记录如下。 首先，使用embedding主要有两大原因： 1.使用One-hot 方法编码的向量会很高维也很稀疏。假设我们在做自然语言处理（NLP）</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://zdhwg.github.io/about/</link>
      <pubDate>Thu, 13 Feb 2020 15:13:27 +0000</pubDate>
      
      <guid>https://zdhwg.github.io/about/</guid>
      <description>美好的事情将要发生 画下一只永远不会流泪的眼睛</description>
    </item>
    
    <item>
      <title>Hugo博客如何新建及上传文章</title>
      <link>https://zdhwg.github.io/post/hugo%E5%8D%9A%E5%AE%A2%E5%A6%82%E4%BD%95%E6%96%B0%E5%BB%BA%E5%8F%8A%E4%B8%8A%E4%BC%A0%E6%96%87%E7%AB%A0/</link>
      <pubDate>Thu, 13 Feb 2020 17:48:26 +0800</pubDate>
      
      <guid>https://zdhwg.github.io/post/hugo%E5%8D%9A%E5%AE%A2%E5%A6%82%E4%BD%95%E6%96%B0%E5%BB%BA%E5%8F%8A%E4%B8%8A%E4%BC%A0%E6%96%87%E7%AB%A0/</guid>
      <description>​ 在hugo博客每次要创建新的博客时，可以在命令行cd到myblog的根目录（或者直接在content/post文件夹下新建一个markdown文件），然后运行以下命令： hugo new post/要创建的文件名字.md ​ 在写完文章后，要上传到静态网站上，首先要在站点跟目录（myblog)上执</description>
    </item>
    
    <item>
      <title>归档</title>
      <link>https://zdhwg.github.io/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zdhwg.github.io/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>搜索</title>
      <link>https://zdhwg.github.io/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zdhwg.github.io/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>